searchState.loadedDescShard("evm_opcodes", 0, "Ethereum virtual machine opcode\nAddition operation.\nAddition operation.\nModulo addition operation.\nModulo addition operation.\nGet address of currently executing account.\nGet address of currently executing account.\nBitwise AND operation.\nBitwise AND operation.\nGet balance of the given account.\nGet balance of the given account.\nGet the base fee.\nGet the current blob base fee.\nGet versioned hash at index.\nGet the hash of one of the 256 most recent complete blocks.\nGet the hash of one of the 256 most recent complete blocks.\nRetrieve single byte from word.\nRetrieve single byte from word.\nBerlin\nBlock Information\nByzantium\nMessage-call into an account.\nMessage-call into an account.\nMessage-call into this account with alternative account’…\nMessage-call into this account with alternative …\nCopy input data in current environment to memory.\nCopy input data in current environment to memory.\nGet input data of current environment.\nGet input data of current environment.\nGet size of input data in current environment.\nGet size of input data in current environment.\nGet caller address.\nGet caller address.\nGet deposited value by the instruction/transaction …\nGet deposited value by the instruction/transaction …\nGet the chain ID.\nCopy code running in current environment to memory.\nCopy code running in current environment to memory.\nGet size of code running in current environment.\nGet size of code running in current environment.\nGet the block’s beneficiary address.\nGet the block’s beneficiary address.\nCreate a new account with associated code.\nCreate a new account with associated\nCreate a new account with associated code at a specified …\nCreate a new account with associated code at a specified …\nEthereum virtual machine opcode.\nCancun\nComparison &amp; Bitwise Logic Operations\nConstantinople\nMessage-call with an alternative account’s code, …\nMessage-call into this account with an alternative …\nGet the block’s difficulty.\nGet the block’s difficulty.\nInteger division operation.\nInteger division operation.\nDuplicate 1st stack item.\nDuplicate 1st stack item.\nDuplicate 10th stack item.\nDuplicate 10th stack item.\nDuplicate 11th stack item.\nDuplicate 11th stack item.\nDuplicate 12th stack item.\nDuplicate 12th stack item.\nDuplicate 13th stack item.\nDuplicate 13th stack item.\nDuplicate 14th stack item.\nDuplicate 14th stack item.\nDuplicate 15th stack item.\nDuplicate 15th stack item.\nDuplicate 16th stack item.\nDuplicate 16th stack item.\nDuplicate 2nd stack item.\nDuplicate 2nd stack item.\nDuplicate 3rd stack item.\nDuplicate 3rd stack item.\nDuplicate 4th stack item.\nDuplicate 4th stack item.\nDuplicate 5th stack item.\nDuplicate 5th stack item.\nDuplicate 6th stack item.\nDuplicate 6th stack item.\nDuplicate 7th stack item.\nDuplicate 7th stack item.\nDuplicate 8th stack item.\nDuplicate 8th stack item.\nDuplicate 9th stack item.\nDuplicate 9th stack item.\nNo operation but provides a byte for serializing.\nNo operation but provides a byte for serializing.\nDuplication Operations\nEquality comparison.\nEquality comparison.\nExponential operation.\nExponential operation.\nCopy an account’s code to memory.\nCopy an account’s code to memory.\nGet hash of an account’s code.\nGet size of an account’s code.\nGet size of an account’s code.\nEnvironmental Information\nExchange Operations\nFrontier\nGet the amount of available gas.\nGet the amount of available gas, including the …\nGet the block’s gas limit.\nGet the block’s gas limit.\nGet price of gas in current environment\nGet price of gas in current environment\nGreater-than comparison.\nGreater-than comparison.\nEVM opcode groups\nDesignated invalid instruction.\nDesignated invalid instruction.\nSimple not operator.\nSimple not operator.\nIstanbul\nAlter the program counter.\nAlter the program counter.\nMark a valid destination for jumps.\nMark a valid destination for jumps.\nConditionally alter the program counter.\nConditionally alter the program counter.\nCompute Keccak-256 hash.\nCompute Keccak-256 hash.\nAppend log record with no topics.\nAppend log record with no topics.\nAppend log record with one topic.\nAppend log record with one topic.\nAppend log record with two topics.\nAppend log record with two topics.\nAppend log record with three topics.\nAppend log record with three topics.\nAppend log record with four topics.\nAppend log record with four topics.\nLess-than comparison.\nLess-than comparison.\nLogging Operations\nLondon\ncopy memory areas\nLoad word from memory.\nLoad word from memory.\nModulo remainder operation.\nModulo remainder operation.\nGet the size of active memory in bytes.\nGet the size of active memory in bytes.\nSave word to memory.\nSave word to memory.\nSave byte to memory.\nSave byte to memory.\nMultiplication operation.\nMultiplication operation.\nModulo multiplication operation.\nModulo multiplication operation.\nBitwise NOT operation.\nBitwise NOT operation.\nGet the block’s number.\nGet the block’s number.\nBitwise OR operation.\nBitwise OR operation.\nGet execution origination address.\nGet execution origination address.\nEthereum virtual machine opcode.\nGet the value of the program counter prior to the …\nGet the value of the program counter prior to the …\nRemove item from stack.\nRemove item from stack.\nPlace 0 byte item on stack.\nPlace 0 byte item on stack.\nPlace 1 byte item on stack.\nPlace 1 byte item on stack.\nPlace 10-byte item on stack.\nPlace 10-byte item on stack.\nPlace 11-byte item on stack.\nPlace 11-byte item on stack.\nPlace 12-byte item on stack.\nPlace 12-byte item on stack.\nPlace 13-byte item on stack.\nPlace 13-byte item on stack.\nPlace 14-byte item on stack.\nPlace 14-byte item on stack.\nPlace 15-byte item on stack.\nPlace 15-byte item on stack.\nPlace 16-byte item on stack.\nPlace 16-byte item on stack.\nPlace 17-byte item on stack.\nPlace 17-byte item on stack.\nPlace 18-byte item on stack.\nPlace 18-byte item on stack.\nPlace 19-byte item on stack.\nPlace 19-byte item on stack.\nPlace 2-byte item on stack.\nPlace 2-byte item on stack.\nPlace 20-byte item on stack.\nPlace 20-byte item on stack.\nPlace 21-byte item on stack.\nPlace 21-byte item on stack.\nPlace 22-byte item on stack.\nPlace 22-byte item on stack.\nPlace 23-byte item on stack.\nPlace 23-byte item on stack.\nPlace 24-byte item on stack.\nPlace 24-byte item on stack.\nPlace 25-byte item on stack.\nPlace 25-byte item on stack.\nPlace 26-byte item on stack.\nPlace 26-byte item on stack.\nPlace 27-byte item on stack.\nPlace 27-byte item on stack.\nPlace 28-byte item on stack.\nPlace 28-byte item on stack.\nPlace 29-byte item on stack.\nPlace 29-byte item on stack.\nPlace 3-byte item on stack.\nPlace 3-byte item on stack.\nPlace 30-byte item on stack.\nPlace 30-byte item on stack.\nPlace 31-byte item on stack.\nPlace 31-byte item on stack.\nPlace 32-byte (full word) item on stack.\nPlace 32-byte (full word) item on stack.\nPlace 4-byte item on stack.\nPlace 4-byte item on stack.\nPlace 5-byte item on stack.\nPlace 5-byte item on stack.\nPlace 6-byte item on stack.\nPlace 6-byte item on stack.\nPlace 7-byte item on stack.\nPlace 7-byte item on stack.\nPlace 8-byte item on stack.\nPlace 8-byte item on stack.\nPlace 9-byte item on stack.\nPlace 9-byte item on stack.\nPush Operations\nHalt execution returning output data.\nHalt execution returning output data.\nCopy output data from the previous call to memory.\nCopy output data from the previous call to memory.\nGet size of output data from the previous call from the …\nGet size of output data from the previous call from the …\nStop execution and revert state changes, without consuming …\nStop execution and revert state changes, without consuming …\nArithmetic (signed) right shift operation\nArithmetic (signed) right shift operation\nSigned integer division operation (truncated).\nSigned integer division operation (truncated).\nGet balance of currently executing account.\nHalt execution and register account for later deletion.\nHalt execution and register account for later deletion.\nSigned greater-than comparison.\nSigned greater-than comparison.\nLeft shift operation\nLeft shift operation\nLogical right shift operation\nLogical right shift operation\nExtend length of two’s complement signed integer.\nExtend length of two’s complement signed integer.\nLoad word from storage.\nLoad word from storage.\nSigned less-than comparison.\nSigned less-than comparison.\nSigned modulo remainder operation.\nSigned modulo remainder operation.\nSave word to storage.\nSave word to storage.\nStatic message-call into an account.\nStatic message-call into an account.\nHalts execution.\nHalts execution.\nSubtraction operation.\nSubtraction operation.\nExchange 1st and 2nd stack items.\nExchange 1st and 2nd stack items.\nExchange 1st and 11th stack items.\nExchange 1st and 11th stack items.\nExchange 1st and 12th stack items.\nExchange 1st and 12th stack items.\nExchange 1st and 13th stack items.\nExchange 1st and 13th stack items.\nExchange 1st and 14th stack items.\nExchange 1st and 14th stack items.\nExchange 1st and 15th stack items.\nExchange 1st and 15th stack items.\nExchange 1st and 16th stack items.\nExchange 1st and 16th stack items.\nExchange 1st and 17th stack items.\nExchange 1st and 17th stack items.\nExchange 1st and 3rd stack items.\nExchange 1st and 3rd stack items.\nExchange 1st and 4th stack items.\nExchange 1st and 4th stack items.\nExchange 1st and 5th stack items.\nExchange 1st and 5th stack items.\nExchange 1st and 6th stack items.\nExchange 1st and 6th stack items.\nExchange 1st and 7th stack items.\nExchange 1st and 7th stack items.\nExchange 1st and 8th stack items.\nExchange 1st and 8th stack items.\nExchange 1st and 9th stack items.\nExchange 1st and 9th stack items.\nExchange 1st and 10th stack items.\nExchange 1st and 10th stack items.\nSHA3\nEthereum virtual machine opcode.\nShanghai\nStack, Memory, Storage and Flow Operations\nStop and Arithmetic Operations\nSystem operations\nGet the block’s timestamp.\nGet the block’s timestamp.\nLoad word from transient storage\nSave word to transient storage.\nEthereum upgrades.\nBitwise XOR operation.\nBitwise XOR operation.\nInstructions for Cancun.\nFor each Cancun operator.\nFor each ShangHai operator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe basic gas cost of the OpCode.\nThe group of the OpCode.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEthereum virtual machine opcode generator.\nInstructions for ShangHai (上海).\nThe OpCode is available since.\nThe stack input count.\nThe stack output count.\nAddition operation.\nModulo addition operation.\nGet address of currently executing account.\nBitwise AND operation.\nGet balance of the given account.\nGet the base fee.\nGet the current blob base fee.\nGet versioned hash at index.\nGet the hash of one of the 256 most recent complete blocks.\nRetrieve single byte from word.\nMessage-call into an account.\nMessage-call into this account with alternative account’…\nCopy input data in current environment to memory.\nGet input data of current environment.\nGet size of input data in current environment.\nGet caller address.\nGet deposited value by the instruction/transaction …\nGet the chain ID.\nCopy code running in current environment to memory.\nGet size of code running in current environment.\nGet the block’s beneficiary address.\nCreate a new account with associated code.\nCreate a new account with associated code at a specified …\nEthereum virtual machine opcode.\nMessage-call with an alternative account’s code, …\nGet the block’s difficulty.\nInteger division operation.\nDuplicate 1st stack item.\nDuplicate 10th stack item.\nDuplicate 11th stack item.\nDuplicate 12th stack item.\nDuplicate 13th stack item.\nDuplicate 14th stack item.\nDuplicate 15th stack item.\nDuplicate 16th stack item.\nDuplicate 2nd stack item.\nDuplicate 3rd stack item.\nDuplicate 4th stack item.\nDuplicate 5th stack item.\nDuplicate 6th stack item.\nDuplicate 7th stack item.\nDuplicate 8th stack item.\nDuplicate 9th stack item.\nNo operation but provides a byte for serializing.\nEquality comparison.\nExponential operation.\nCopy an account’s code to memory.\nGet hash of an account’s code.\nGet size of an account’s code.\nGet the amount of available gas.\nGet the block’s gas limit.\nGet price of gas in current environment\nGreater-than comparison.\nDesignated invalid instruction.\nSimple not operator.\nAlter the program counter.\nMark a valid destination for jumps.\nConditionally alter the program counter.\nCompute Keccak-256 hash.\nAppend log record with no topics.\nAppend log record with one topic.\nAppend log record with two topics.\nAppend log record with three topics.\nAppend log record with four topics.\nLess-than comparison.\ncopy memory areas\nLoad word from memory.\nModulo remainder operation.\nGet the size of active memory in bytes.\nSave word to memory.\nSave byte to memory.\nMultiplication operation.\nModulo multiplication operation.\nBitwise NOT operation.\nGet the block’s number.\nBitwise OR operation.\nGet execution origination address.\nGet the value of the program counter prior to the …\nRemove item from stack.\nPlace 0 byte item on stack.\nPlace 1 byte item on stack.\nPlace 10-byte item on stack.\nPlace 11-byte item on stack.\nPlace 12-byte item on stack.\nPlace 13-byte item on stack.\nPlace 14-byte item on stack.\nPlace 15-byte item on stack.\nPlace 16-byte item on stack.\nPlace 17-byte item on stack.\nPlace 18-byte item on stack.\nPlace 19-byte item on stack.\nPlace 2-byte item on stack.\nPlace 20-byte item on stack.\nPlace 21-byte item on stack.\nPlace 22-byte item on stack.\nPlace 23-byte item on stack.\nPlace 24-byte item on stack.\nPlace 25-byte item on stack.\nPlace 26-byte item on stack.\nPlace 27-byte item on stack.\nPlace 28-byte item on stack.\nPlace 29-byte item on stack.\nPlace 3-byte item on stack.\nPlace 30-byte item on stack.\nPlace 31-byte item on stack.\nPlace 32-byte (full word) item on stack.\nPlace 4-byte item on stack.\nPlace 5-byte item on stack.\nPlace 6-byte item on stack.\nPlace 7-byte item on stack.\nPlace 8-byte item on stack.\nPlace 9-byte item on stack.\nHalt execution returning output data.\nCopy output data from the previous call to memory.\nGet size of output data from the previous call from the …\nStop execution and revert state changes, without consuming …\nArithmetic (signed) right shift operation\nSigned integer division operation (truncated).\nGet balance of currently executing account.\nHalt execution and register account for later deletion.\nSigned greater-than comparison.\nLeft shift operation\nLogical right shift operation\nExtend length of two’s complement signed integer.\nLoad word from storage.\nSigned less-than comparison.\nSigned modulo remainder operation.\nSave word to storage.\nStatic message-call into an account.\nHalts execution.\nSubtraction operation.\nExchange 1st and 2nd stack items.\nExchange 1st and 11th stack items.\nExchange 1st and 12th stack items.\nExchange 1st and 13th stack items.\nExchange 1st and 14th stack items.\nExchange 1st and 15th stack items.\nExchange 1st and 16th stack items.\nExchange 1st and 17th stack items.\nExchange 1st and 3rd stack items.\nExchange 1st and 4th stack items.\nExchange 1st and 5th stack items.\nExchange 1st and 6th stack items.\nExchange 1st and 7th stack items.\nExchange 1st and 8th stack items.\nExchange 1st and 9th stack items.\nExchange 1st and 10th stack items.\nGet the block’s timestamp.\nLoad word from transient storage\nSave word to transient storage.\nBitwise XOR operation.\nAddition operation.\nModulo addition operation.\nGet address of currently executing account.\nBitwise AND operation.\nGet balance of the given account.\nGet the hash of one of the 256 most recent complete blocks.\nRetrieve single byte from word.\nMessage-call into an account.\nMessage-call into this account with alternative …\nCopy input data in current environment to memory.\nGet input data of current environment.\nGet size of input data in current environment.\nGet caller address.\nGet deposited value by the instruction/transaction …\nCopy code running in current environment to memory.\nGet size of code running in current environment.\nGet the block’s beneficiary address.\nCreate a new account with associated\nCreate a new account with associated code at a specified …\nMessage-call into this account with an alternative …\nGet the block’s difficulty.\nInteger division operation.\nDuplicate 1st stack item.\nDuplicate 10th stack item.\nDuplicate 11th stack item.\nDuplicate 12th stack item.\nDuplicate 13th stack item.\nDuplicate 14th stack item.\nDuplicate 15th stack item.\nDuplicate 16th stack item.\nDuplicate 2nd stack item.\nDuplicate 3rd stack item.\nDuplicate 4th stack item.\nDuplicate 5th stack item.\nDuplicate 6th stack item.\nDuplicate 7th stack item.\nDuplicate 8th stack item.\nDuplicate 9th stack item.\nNo operation but provides a byte for serializing.\nEquality comparison.\nExponential operation.\nCopy an account’s code to memory.\nGet size of an account’s code.\nGet the amount of available gas, including the …\nGet the block’s gas limit.\nGet price of gas in current environment\nGreater-than comparison.\nDesignated invalid instruction.\nSimple not operator.\nAlter the program counter.\nMark a valid destination for jumps.\nConditionally alter the program counter.\nCompute Keccak-256 hash.\nAppend log record with no topics.\nAppend log record with one topic.\nAppend log record with two topics.\nAppend log record with three topics.\nAppend log record with four topics.\nLess-than comparison.\nLoad word from memory.\nModulo remainder operation.\nGet the size of active memory in bytes.\nSave word to memory.\nSave byte to memory.\nMultiplication operation.\nModulo multiplication operation.\nBitwise NOT operation.\nGet the block’s number.\nBitwise OR operation.\nGet execution origination address.\nGet the value of the program counter prior to the …\nRemove item from stack.\nPlace 0 byte item on stack.\nPlace 1 byte item on stack.\nPlace 10-byte item on stack.\nPlace 11-byte item on stack.\nPlace 12-byte item on stack.\nPlace 13-byte item on stack.\nPlace 14-byte item on stack.\nPlace 15-byte item on stack.\nPlace 16-byte item on stack.\nPlace 17-byte item on stack.\nPlace 18-byte item on stack.\nPlace 19-byte item on stack.\nPlace 2-byte item on stack.\nPlace 20-byte item on stack.\nPlace 21-byte item on stack.\nPlace 22-byte item on stack.\nPlace 23-byte item on stack.\nPlace 24-byte item on stack.\nPlace 25-byte item on stack.\nPlace 26-byte item on stack.\nPlace 27-byte item on stack.\nPlace 28-byte item on stack.\nPlace 29-byte item on stack.\nPlace 3-byte item on stack.\nPlace 30-byte item on stack.\nPlace 31-byte item on stack.\nPlace 32-byte (full word) item on stack.\nPlace 4-byte item on stack.\nPlace 5-byte item on stack.\nPlace 6-byte item on stack.\nPlace 7-byte item on stack.\nPlace 8-byte item on stack.\nPlace 9-byte item on stack.\nHalt execution returning output data.\nCopy output data from the previous call to memory.\nGet size of output data from the previous call from the …\nStop execution and revert state changes, without consuming …\nArithmetic (signed) right shift operation\nSigned integer division operation (truncated).\nHalt execution and register account for later deletion.\nSigned greater-than comparison.\nLeft shift operation\nLogical right shift operation\nExtend length of two’s complement signed integer.\nLoad word from storage.\nSigned less-than comparison.\nSigned modulo remainder operation.\nSave word to storage.\nStatic message-call into an account.\nHalts execution.\nSubtraction operation.\nExchange 1st and 2nd stack items.\nExchange 1st and 11th stack items.\nExchange 1st and 12th stack items.\nExchange 1st and 13th stack items.\nExchange 1st and 14th stack items.\nExchange 1st and 15th stack items.\nExchange 1st and 16th stack items.\nExchange 1st and 17th stack items.\nExchange 1st and 3rd stack items.\nExchange 1st and 4th stack items.\nExchange 1st and 5th stack items.\nExchange 1st and 6th stack items.\nExchange 1st and 7th stack items.\nExchange 1st and 8th stack items.\nExchange 1st and 9th stack items.\nExchange 1st and 10th stack items.\nEthereum virtual machine opcode.\nGet the block’s timestamp.\nBitwise XOR operation.")