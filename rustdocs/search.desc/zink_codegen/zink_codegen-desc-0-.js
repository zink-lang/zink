searchState.loadedDescShard("zink_codegen", 0, "Code generation library for the zink API\nEvent logging interface\nDeclare contract storage\nCheck and expression and revert with the input message\nDerive macro for contract storage\nMark the function as an external entry point.\nRevert macro\nRevert with the input message\nMacro for the function selector.\nDeclare on-chain storage\nDeclare transient storage (cleared after each transaction)\nUtils for bytes conversion.\nGenerate the expanded TokenStream\nExtract generic types from DoubleKeyMapping&lt;K1, K2, V&gt;\nExtract generic types from Mapping&lt;K, V&gt;\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new ContractStorage from an input struct\nParse and validate the input, returning a TokenStream\nExpand the event interface with better error handling\nAssert input\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRevert with message\nParse assert macro\nMark the function as external.\nDouble key mapping storage\nInvalid storage type\nMapping storage\nStorage attributes parser\nStorage type (persistent or transient)\nZink storage type parser\nSingle value storage\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the getter of this storage\nGetter function of storage\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStorage kind (persistent or transient)\nParse from proc_macro attribute for persistent storage\nParse from proc_macro attribute for transient storage\nThe source and the target storage struct\nkind of the storage\nTrait for converting type to bytes32.\nImplement Bytes32 for types.\nConvert type to the lowest significant bytes 32.\nConvert type to vec of bytes.")